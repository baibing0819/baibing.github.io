<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>两数之和</title>
      <link href="/2019/03/10/liang-shu-zhi-he/"/>
      <url>/2019/03/10/liang-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>        给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，返回的两个下标不能相同，即不能为相同的一个元素。<br>示例：<br>        给定 nums = [2, 7, 11, 15], target = 9<br>        因为 nums[0] + nums[1] = 2 + 7 = 9<br>        所以返回 [0, 1]</p><p><strong>思路一（暴力法）：</strong><br>        遍历每个元素 x，并查找是否存在一个值与 target - x 相等的目标元素。显然是需要两个迭代，使用C编写。<br><strong>code:</strong></p><pre><code>int* twoSum(int* nums, int numsSize, int target) {    static int a[2] = {0};    int i,j;    i = j = 0;    for(i = 0;i &lt; numsSize;i++)    {        for(j = i+1;j &lt; numsSize;j++)        {            if(nums[i] + nums[j] == target)            {                a[0] = i;                a[1] = j;                return a;            }        }    }    return 0;}</code></pre><p>复杂度：<br>       时间复杂度：O(n^2)；            空间复杂度：O(1)</p><p><strong>思路二：</strong><br>        对于上述问题，我们可以优化其时间复杂度，在查找数组中是否存在满足目标值的迭代中，我们可以利用哈希表的特点，能够使索引与数据一一对应，这样我们查找目标值时，时间复杂度可以由O(n)变为O(1)(当然是理想状况下，由于hash map还存在冲突等问题，并不能完全达到O(1)的时间，但其效率还是要远远大于O(n))。由于用C编写hashmap较复杂，所以这里我们用Python编写，用其中的’字典’来存储数据，因为字典背后的原理就是一个散列表。在进行迭代并将元素插入到表中的同时(元素不在表中)，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。如果它存在，那我们已经找到了对应解，并立即将其返回。<br><strong>code：</strong></p><pre><code>class Solution:    def twoSum(self,nums,target):        length = len(nums)        key = {}        for i in range(length):            new_n = target - nums[i];    #用于判断当前值对应的目标元素是否在新字典里            if new_n in key:                return [key[new_n],i]       #目标元素在新字典中，直接返回其下标            if nums[i] not in key:                key[nums[i]] = i            #目标元素不在新字典中，将当前值存储到新字典中，用于后面原字典数据的判断</code></pre><p>复杂度：<br>      因为只使用了一个迭代，故时间复杂度O(n)；同样的，因为用新字典key{}存储已经判断过的值，即我们是通过空间的提升换取时间效率的提升，所以空间复杂度由O(1)变为O(n)。</p>]]></content>
      
      
      <categories>
          
          <category> Programming Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 求和算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2019/03/08/hexo-github-da-jian-ge-ren-bo-ke/"/>
      <url>/2019/03/08/hexo-github-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>    花了两天时间，总算是搭建了自己的个人博客。基本上跟着网上大神的教程做，大部分很顺利，但还是不可避免的遇到一些小的坑，因此花费了不少的时间，故在此也总结一下自己遇到的问题，若大家遇到相似的问题，可以快速的解决。搭建博客主要是下面三个方面，完成后就可以完美的发博客啦。</p><h3 id="步骤-教程直通车"><a href="#步骤-教程直通车" class="headerlink" title="步骤+教程直通车:"></a><strong>步骤+教程直通车</strong>:</h3><h4 id="1、hexo-github-搭建个人博客"><a href="#1、hexo-github-搭建个人博客" class="headerlink" title="1、hexo + github 搭建个人博客:"></a>1、hexo + github 搭建个人博客:</h4><pre><code>[网址传送门：](https://mp.weixin.qq.com/s?__biz=MzI5NDY1MjQzNA==&amp;mid=2247488956&amp;idx=3&amp;sn=a0c52c1a270269925fc6ea9e84596e10&amp;chksm=ec5ecac1db2943d75368ef598fd22eda6497dbc35e5b8941335d2fc9e44de516bcc470f8e4a2&amp;mpshare=1&amp;scene=1&amp;srcid=0302seoWmMigQ065XCb3qvxP&amp;key=0c5bd8d37f17829348d3918abd80122f9caed41ef7b4beefc679edddb6b35997f0f0ad370cf89dbe6c92ab782f69d7bacc8a7a59f3d7a19fb1069951797c63f67131fb05a0f8ab28ae68db51b144f374&amp;ascene=1&amp;uin=MjY0NTYwMzU0Mw%3D%3D&amp;devicetype=Windows+10&amp;version=62060728&amp;lang=zh_CN&amp;pass_ticket=1UsAPqwJzqsYyPrWZrAjE7b15egEPEQyl1ynzAbdrWvGDxenn7xA694UKAIrWc0V)</code></pre><h4 id="2、选择主题："><a href="#2、选择主题：" class="headerlink" title="2、选择主题："></a>2、选择主题：</h4><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/" target="_blank" rel="noopener">网址传送门：</a></p><h4 id="3、搭建图床："><a href="#3、搭建图床：" class="headerlink" title="3、搭建图床："></a>3、搭建图床：</h4><p><a href="https://www.cnblogs.com/asheng2016/p/9572128.html" target="_blank" rel="noopener">网址传送门：</a><br>    个人就是按照上面的网址教程一步步的安装完成的。现在来说一下我遇到的一些问题…</p><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>1、选择主题并配置后，页面没有任何变化，依旧是原始画面。<br>        是因为从网上下载解压后的主题文件夹名字与_config.yml文件里面的配置不同，必须改为一致的。<br><img src="https://ice-bai-1258776328.cos.ap-guangzhou.myqcloud.com/blogcfg.png" alt><img src="https://ice-bai-1258776328.cos.ap-guangzhou.myqcloud.com/docname.png" alt><br>2、按照主题帖创建主题后，出现了博客页面空白的现象。<br>        这个是因为按照教程修改配置时，在改动项冒号后直接写内容，导致页面不显示。_config.yml 文件里所有配置项的内容都需要在其冒号后空一格再写内容。<br>3、想换掉主题 中的照片、logo时，改成一样的名字没有成功。<br>        因为图片的格式与之前的不同，可能你的是a.png，原主题的是a.jpg的，所以和其配置选项中的名字不同，导致换图片失败。<br>4、利用hexo + github搭建好博客后，在git bash 里输入hexo server 启动本地预览（<a href="http://localhost:4000/）发现页面找不到，404错误等。" target="_blank" rel="noopener">http://localhost:4000/）发现页面找不到，404错误等。</a><br>        很有可能4000这个端口被占用，此时可以输入命令 (hexo server -p 5000) 来换一个端口就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyFirstBlog</title>
      <link href="/2019/03/07/myfirstblog/"/>
      <url>/2019/03/07/myfirstblog/</url>
      
        <content type="html"><![CDATA[<pre><code>    在hexo+github上的第一个博客，看看效果。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
